/* -*-c++-*- */
/* osgEarth - Geospatial SDK for OpenSceneGraph
* Copyright 2020 Pelican Mapping
* http://osgearth.org
*
* osgEarth is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 2 of the License, or
* (at your option) any later version.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
* IN THE SOFTWARE.
*
* You should have received a copy of the GNU Lesser General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>
*/
#ifndef OSGEARTH_TILE_RASTERIZER_H
#define OSGEARTH_TILE_RASTERIZER_H 1

#include <osgEarth/Common>
#include <osgEarth/GeoData>
#include <osgEarth/Threading>
#include <osgEarth/TileKey>
#include <osg/Camera>
#include <osg/BufferObject>
#include <osg/Texture2D>
#include <osgViewer/Viewer>
#include <queue>

namespace osgEarth
{
    /**
    * Render node graphs to textures, one at a time.
    */
    class OSGEARTH_EXPORT TileRasterizer : public osg::Referenced
    {
    public:
        //! Construct a new tile rasterizer camera
        TileRasterizer(unsigned width, unsigned height);

        //! Whether the rasterizer initialized properly and is valid for use.
        bool valid() const;

        /**
        * Schedule a rasterization to an osg::Image.
        * @param node Node to render to the image
        * @param size of the target image (both dimensions)
        * @param extent geospatial extent of the node to render.
        * @return Future image - blocks on .get() or .release()
        */
        Threading::Future<osg::Image> render(osg::Node* node, const GeoExtent& extent);

        //! destructor
        virtual ~TileRasterizer();

        osg::Node* getNode() const;

    private:

        struct RenderData {
            bool _initialized;
            osg::ref_ptr<osgUtil::SceneView> _sv;
            mutable osg::buffered_object<GLuint> _samplesQuery;
            mutable osg::buffered_object<GLuint> _pbo;
            osg::observer_ptr<osg::GraphicsContext> _gc;
            unsigned _width, _height;
        };

        struct RenderOperation : public osg::GraphicsOperation {
            RenderOperation(osg::Node* node, const GeoExtent& extent, RenderData& renderData);
            Threading::Future<osg::Image> getFuture();
            void operator () (osg::GraphicsContext* context);
            osg::ref_ptr<osg::Node> _node;
            GeoExtent _extent;
            osg::ref_ptr<osg::Image> _image;
            Threading::Promise<osg::Image> _promise;
            RenderData& _renderData;
            int _pass;
            bool _async;
            GLuint _pbo;
        };

        struct RenderInstaller : public osg::Drawable {
            RenderInstaller(RenderData& renderData);
            void drawImplementation(osg::RenderInfo& ri) const;
            RenderData& _renderData;
        };

        RenderData _renderData;
        osg::ref_ptr<osg::Drawable> _installer;
    };

} // namespace osgEarth

#endif // OSGEARTH_TILE_RASTERIZER_H
